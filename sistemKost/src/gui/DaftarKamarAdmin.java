/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.*;
import javax.swing.*;
import model.KamarKos;
import repository.KamarKosRepository;
import controller.DatabaseConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author riendra
 */

public class DaftarKamarAdmin extends javax.swing.JFrame {
    private final DefaultTableModel tableModel;
    private Connection conn;
    
    /**
     * Creates new form daftarkamar
     */
    // Establish database connection

    public DaftarKamarAdmin() {
        initComponents();
        tabelDaftarKamar.setDefaultEditor(Object.class, null);
        
        tableModel = (DefaultTableModel) tabelDaftarKamar.getModel();
        tampilkanDaftarKamar();
        setLocationRelativeTo(null);
    }
    
    private void tampilkanDaftarKamar() {
    try {
        if (conn == null || conn.isClosed()) {
            conn = DatabaseConnection.getConnection();
        }
        
        String sql = "SELECT * FROM kamar";
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            tableModel.setRowCount(0);
            while (rs.next()) {
                java.text.NumberFormat formatter = java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("id", "ID"));
                String hargaFormatted = formatter.format(rs.getDouble("harga_bulan")).replace("Rp", "Rp ");
                
                Object[] rowData = {
                    rs.getString("nomor_kamar"),
                    hargaFormatted,
                    rs.getString("status"),
                    rs.getString("fasilitas"),
                    rs.getString("lokasi"),
                    rs.getString("ukuran"),
                    rs.getString("daya_listrik"),
                    rs.getString("pemilik"),
                    rs.getString("no_telp_pemilik")
                };
                tableModel.addRow(rowData);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error accessing database: " + e.getMessage());
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        sortingDaftar = new javax.swing.JComboBox<>();
        buttonHapus = new javax.swing.JButton();
        buttonTambah = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        buttonKeluarKeMenuLogin = new javax.swing.JButton();
        buttonKeluar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelDaftarKamar = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Sorting Daftar :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, -1, 30));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Cari Kamar :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 40, -1, 30));

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        getContentPane().add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 40, 130, 30));

        sortingDaftar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua", "Nomor Kamar (Ascending)", "Nomor Kamar (Descending)", "Harga (Ascending)", "Harga (Descending)", "Status (Tersedia)", "Status (Tidak Tersedia)" }));
        sortingDaftar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingDaftarActionPerformed(evt);
            }
        });
        getContentPane().add(sortingDaftar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, 200, 30));

        buttonHapus.setText("Hapus");
        buttonHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHapusActionPerformed(evt);
            }
        });
        getContentPane().add(buttonHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 540, -1, -1));

        buttonTambah.setText("Tambah");
        buttonTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTambahActionPerformed(evt);
            }
        });
        getContentPane().add(buttonTambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, -1, -1));

        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });
        getContentPane().add(buttonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 540, -1, -1));

        buttonRefresh.setText("Refresh Tabel");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        getContentPane().add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 540, -1, -1));

        buttonKeluarKeMenuLogin.setText("Kembali ke Menu Login");
        buttonKeluarKeMenuLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKeluarKeMenuLoginActionPerformed(evt);
            }
        });
        getContentPane().add(buttonKeluarKeMenuLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 540, -1, -1));

        buttonKeluar.setText("Keluar");
        buttonKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKeluarActionPerformed(evt);
            }
        });
        getContentPane().add(buttonKeluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 540, -1, -1));

        tabelDaftarKamar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No Kamar", "Harga per Bulan", "Ketersediaan Kamar", "Fasilitas", "Lokasi", "Ukuran", "Daya Listrik", "Nama Pemilik", "No Telpon Pemilik"
            }
        ));
        jScrollPane1.setViewportView(tabelDaftarKamar);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 1120, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar_gui/daftarkamar.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 660));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTambahActionPerformed
        // TODO add your handling code here:                                            
        try {
            // Buat dialog input untuk memasukkan data kamar
            String nomorKamar = JOptionPane.showInputDialog(this, "Masukkan Nomor Kamar:");
            if (nomorKamar == null) return; // User menekan Cancel

            String hargaStr = JOptionPane.showInputDialog(this, "Masukkan Harga per Bulan:");
            if (hargaStr == null) return;
            double hargaBulan = Double.parseDouble(hargaStr);

            String status = JOptionPane.showInputDialog(this, "Masukkan Status Kamar (Tersedia/Tidak Tersedia):");
            if (status == null) return;

            String fasilitas = JOptionPane.showInputDialog(this, "Masukkan Fasilitas Kamar:");
            if (fasilitas == null) return;

            String lokasi = JOptionPane.showInputDialog(this, "Masukkan Lokasi Kamar:");
            if (lokasi == null) return;
            
            String ukuran = JOptionPane.showInputDialog(this, "Masukkan Ukuran Kamar:");
            if (ukuran == null) return;
            
            String dayaListrik = JOptionPane.showInputDialog(this, "Masukkan Daya Listrik Kamar:");
            if (dayaListrik == null) return;
            
            String pemilik = JOptionPane.showInputDialog(this, "Masukkan Nama Pemilik: ");
            if (pemilik == null) return;
            
            String noTelpPemilik = JOptionPane.showInputDialog(this, "Masukkan Nomor Telpon Pemilik: ");
            if (noTelpPemilik == null) return;
            
            // Buat objek KamarKos
            var kamarBaru = new KamarKos(nomorKamar, hargaBulan, status, fasilitas, lokasi, ukuran, dayaListrik, pemilik, noTelpPemilik);
            kamarBaru.setNomorKamar(nomorKamar);
            kamarBaru.setHargaBulan(hargaBulan);
            kamarBaru.setStatus(status);
            kamarBaru.setFasilitas(fasilitas);
            kamarBaru.setLokasi(lokasi);
            kamarBaru.setDayaListrik(dayaListrik);
            kamarBaru.setPemilik(pemilik);
            kamarBaru.setNoTelpPemilik(noTelpPemilik);
            

            // Simpan ke database menggunakan Repository
            KamarKosRepository repository = KamarKosRepository.getInstance();
            repository.save(kamarBaru);

            // Refresh tabel
            tampilkanDaftarKamar();

            JOptionPane.showMessageDialog(this, "Data kamar berhasil ditambahkan!");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Harga harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    // Method untuk refresh tabe
    }//GEN-LAST:event_buttonTambahActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:
        try {
            // Buat dialog input untuk memasukkan data kamar
            String nomorKamar = JOptionPane.showInputDialog(this, "Masukkan Nomor Kamar:");
            if (nomorKamar == null) return; // User menekan Cancel
            
            // Tambahkan pengecekan apakah nomor kamar ada di database
            KamarKosRepository repository = KamarKosRepository.getInstance();
            if (!repository.existsByNomorKamar(nomorKamar)) {
                JOptionPane.showMessageDialog(this, "Nomor Kamar tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String hargaStr = JOptionPane.showInputDialog(this, "Masukkan Harga per Bulan:");
            if (hargaStr == null) return;
            double hargaBulan = Double.parseDouble(hargaStr);

            String status = JOptionPane.showInputDialog(this, "Masukkan Status Kamar (Tersedia/Tidak Tersedia):");
            if (status == null) return;

            String fasilitas = JOptionPane.showInputDialog(this, "Masukkan Fasilitas Kamar:");
            if (fasilitas == null) return;

            String lokasi = JOptionPane.showInputDialog(this, "Masukkan Lokasi Kamar:");
            if (lokasi == null) return;
            
            String ukuran = JOptionPane.showInputDialog(this, "Masukkan Ukuran Kamar:");
            if (ukuran == null) return;
            
            String dayaListrik = JOptionPane.showInputDialog(this, "Masukkan Daya Listrik Kamar:");
            if (dayaListrik == null) return;
            
            String pemilik = JOptionPane.showInputDialog(this, "Masukkan Nama Pemilik: ");
            if (pemilik == null) return;
            
            String noTelpPemilik = JOptionPane.showInputDialog(this, "Masukkan Nomor Telpon Pemilik: ");
            if (noTelpPemilik == null) return;
            
            // Buat objek KamarKos
            var kamarBaru = new KamarKos(nomorKamar, hargaBulan, status, fasilitas, lokasi, ukuran, dayaListrik, pemilik, noTelpPemilik);
            kamarBaru.setNomorKamar(nomorKamar);
            kamarBaru.setHargaBulan(hargaBulan);
            kamarBaru.setStatus(status);
            kamarBaru.setFasilitas(fasilitas);
            kamarBaru.setLokasi(lokasi);
            kamarBaru.setDayaListrik(dayaListrik);
            kamarBaru.setPemilik(pemilik);
            kamarBaru.setNoTelpPemilik(noTelpPemilik);
            

            // Simpan ke database menggunakan Repository
            repository.update(kamarBaru);

            // Refresh tabel
            tampilkanDaftarKamar();

            JOptionPane.showMessageDialog(this, "Data kamar berhasil diubah!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Harga harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // TODO add your handling code here:
        tampilkanDaftarKamar();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKeluarActionPerformed
        // TODO add your handling code here:    
        int konfirmasi = JOptionPane.showConfirmDialog(
            this, 
            "Apakah Anda yakin ingin keluar dari aplikasi?", 
            "Konfirmasi Keluar", 
            JOptionPane.YES_NO_OPTION
        );
    
        if (konfirmasi == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_buttonKeluarActionPerformed

    private void buttonKeluarKeMenuLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKeluarKeMenuLoginActionPerformed
        try {
            // TODO add your handling code here:
            this.dispose();
            MenuLogin menuLogin = new MenuLogin();
            menuLogin.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(DaftarKamarAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonKeluarKeMenuLoginActionPerformed

    private void buttonHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHapusActionPerformed
        // TODO add your handling code here:
        try {
        // Minta input nomor kamar yang akan dihapus
        String nomorKamar = JOptionPane.showInputDialog(this, "Masukkan Nomor Kamar yang akan dihapus:");
        if (nomorKamar == null) return;

        // Cek apakah nomor kamar ada di database
        KamarKosRepository repository = KamarKosRepository.getInstance();
        if (!repository.existsByNomorKamar(nomorKamar)) {
            JOptionPane.showMessageDialog(this, "Nomor Kamar tidak salah/ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Konfirmasi penghapusan
        int konfirmasi = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus kamar dengan nomor " + nomorKamar + "?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION);

        if (konfirmasi == JOptionPane.YES_OPTION) {
            // Hapus kamar
            repository.delete(nomorKamar);

            // Refresh tabel
            tampilkanDaftarKamar();

            JOptionPane.showMessageDialog(this, "Data kamar berhasil dihapus!");
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonHapusActionPerformed

    private void sortingDaftarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingDaftarActionPerformed
        // TODO add your handling code here:
        String sortingdaftar = (String) sortingDaftar.getSelectedItem();
        //        String sortOrder = (String) orderByAction.getSelectedItem();
        String orderDirectionAsc = "ASC";
        String orderDirectionDesc = "DESC";

        try {
            StringBuilder sqlBuilder = new StringBuilder("SELECT * FROM kamar");

            // Tambahkan kondisi pencarian berdasarkan kategori
            switch (sortingdaftar) {
                case "Nomor Kamar (Ascending)" ->
                sqlBuilder.append(" ORDER BY CAST(nomor_kamar AS SIGNED) ASC");
                case "Nomor Kamar (Descending)" ->
                sqlBuilder.append(" ORDER BY CAST(nomor_kamar AS SIGNED) DESC");
                case "Harga (Ascending)" ->
                sqlBuilder.append(" ORDER BY harga_bulan ").append(orderDirectionAsc);
                case "Harga (Descending)" ->
                sqlBuilder.append(" ORDER BY harga_bulan ").append(orderDirectionDesc);
                default ->
                sqlBuilder.append(" ORDER BY nomor_kamar ").append(orderDirectionAsc); // Default ke nomor_kamar
                case "Status (Tersedia)" ->
                sqlBuilder.append(" WHERE status = 'Tersedia'");
                case "Status (Tidak Tersedia)" ->
                sqlBuilder.append(" WHERE status = 'Tidak Tersedia'");
            }

            // Eksekusi query
            PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());
            ResultSet rs = stmt.executeQuery();
            tableModel.setRowCount(0);

            while (rs.next()) {
                java.text.NumberFormat formatter = java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("id", "ID"));
                String hargaFormatted = formatter.format(rs.getDouble("harga_bulan")).replace("Rp", "Rp ");

                Object[] rowData = {
                    rs.getString("nomor_kamar"),
                    hargaFormatted,
                    rs.getString("status"),
                    rs.getString("fasilitas"),
                    rs.getString("lokasi"),
                    rs.getString("ukuran"),
                    rs.getString("daya_listrik"),
                    rs.getString("pemilik"),
                    rs.getString("no_telp_pemilik")
                };
                tableModel.addRow(rowData);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error searching: " + e.getMessage());
        }
    }//GEN-LAST:event_sortingDaftarActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here
        String searchText = searchBar.getText().toLowerCase();
        try {
            String sql = "SELECT * FROM kamar WHERE "
            + "LOWER(nomor_kamar) LIKE ? OR "
            + "LOWER(status) LIKE ? OR "
            + "LOWER(fasilitas) LIKE ? OR "
            + "LOWER(lokasi) LIKE ?";

            PreparedStatement stmt = conn.prepareStatement(sql);
            String searchPattern = "%" + searchText + "%";
            for (int i = 1; i <= 4; i++) {
                stmt.setString(i, searchPattern);
            }

            ResultSet rs = stmt.executeQuery();
            tableModel.setRowCount(0);
            while (rs.next()) {
                java.text.NumberFormat formatter = java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("id", "ID"));
                String hargaFormatted = formatter.format(rs.getDouble("harga_bulan")).replace("Rp", "Rp ");
                Object[] rowData = {
                    rs.getString("nomor_kamar"),
                    hargaFormatted,
                    rs.getString("status"),
                    rs.getString("fasilitas"),
                    rs.getString("lokasi"),
                    rs.getString("ukuran"),
                    rs.getString("daya_listrik"),
                    rs.getString("pemilik"),
                    rs.getString("no_telp_pemilik")
                };
                tableModel.addRow(rowData);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error searching: " + e.getMessage());
        }
    }//GEN-LAST:event_searchBarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DaftarKamarAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DaftarKamarAdmin().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonHapus;
    private javax.swing.JButton buttonKeluar;
    private javax.swing.JButton buttonKeluarKeMenuLogin;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonTambah;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JComboBox<String> sortingDaftar;
    private javax.swing.JTable tabelDaftarKamar;
    // End of variables declaration//GEN-END:variables
}