/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author riendra
 */
public final class DaftarKamarPelanggan extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    private Connection conn;

    public DaftarKamarPelanggan() {
        setupDatabase();
        initComponents();
        setLocationRelativeTo(null);
        setupTable();
        tampilkanDaftarKamar();
    }

    private void setupDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pa_pbo", "root", "");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database connection error: " + e.getMessage());
        }
    }

    private void setupTable() {
        String[] columnNames = {"Nomor Kamar", "Harga per Bulan", "Status", "Fasilitas", "Ukuran", "Daya Listrik"};

        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabelDaftarKamar.setModel(tableModel);
    }

    /**
     *
     */
    public void tampilkanDaftarKamar() {
        try {
            String sql = "SELECT * FROM kamar";
            try (PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {

                tableModel.setRowCount(0);
                while (rs.next()) {
                    java.text.NumberFormat formatter = java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("id", "ID"));
                    String hargaFormatted = formatter.format(rs.getDouble("harga_bulan")).replace("Rp", "Rp ");
                    Object[] rowData = {
                        rs.getString("nomor_kamar"),
                        hargaFormatted,
                        rs.getString("status"),
                        rs.getString("fasilitas"),
                        rs.getString("ukuran"),
                        rs.getString("daya_listrik")
                    };
                    tableModel.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error accessing database: " + e.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // </editor-fold>

    /**
     * Creates new form daftarkamar
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelDaftarKamar = new javax.swing.JTable();
        searchBar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonKeluar = new javax.swing.JButton();
        buttonKembaliKeLogin = new javax.swing.JButton();
        sortingDaftar = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabelDaftarKamar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "nomor kamar", "lantai", "harga per bulan", "status kamar", "fasilitas"
            }
        ));
        jScrollPane1.setViewportView(tabelDaftarKamar);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 1150, 200));

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        getContentPane().add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 130, 100, 30));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Cari Kamar :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, -1, -1));

        buttonKeluar.setText("Keluar");
        buttonKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKeluarActionPerformed(evt);
            }
        });
        getContentPane().add(buttonKeluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, 80, -1));

        buttonKembaliKeLogin.setText("Kembali ke Menu Login");
        buttonKembaliKeLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKembaliKeLoginActionPerformed(evt);
            }
        });
        getContentPane().add(buttonKembaliKeLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 160, 30));

        sortingDaftar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua", "Nomor Kamar (Ascending)", "Nomor Kamar (Descending)", "Harga (Ascending)", "Harga (Descending)", "Status (Tersedia)", "Status (Tidak Tersedia)" }));
        sortingDaftar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingDaftarActionPerformed(evt);
            }
        });
        getContentPane().add(sortingDaftar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, 200, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Sorting Daftar :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, -1, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar_gui/daftarkamar.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1400, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here
        String searchText = searchBar.getText().toLowerCase();
        try {
            String sql = "SELECT * FROM kamar WHERE "
                    + "LOWER(nomor_kamar) LIKE ? OR "
                    + "LOWER(status) LIKE ? OR "
                    + "LOWER(fasilitas) LIKE ?";

            PreparedStatement stmt = conn.prepareStatement(sql);
            String searchPattern = "%" + searchText + "%";
            for (int i = 1; i <= 3; i++) {
                stmt.setString(i, searchPattern);
            }

            ResultSet rs = stmt.executeQuery();
            tableModel.setRowCount(0);
            while (rs.next()) {
                java.text.NumberFormat formatter = java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("id", "ID"));
                String hargaFormatted = formatter.format(rs.getDouble("harga_bulan")).replace("Rp", "Rp ");
                Object[] rowData = {
                    rs.getString("nomor_kamar"),
                    hargaFormatted,
                    rs.getString("status"),
                    rs.getString("fasilitas"),
                    rs.getString("ukuran"),
                    rs.getString("daya_listrik"),
                };
                tableModel.addRow(rowData);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error searching: " + e.getMessage());
        }
    }//GEN-LAST:event_searchBarActionPerformed

    private void sortingDaftarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingDaftarActionPerformed
        // TODO add your handling code here:
        String sortingdaftar = (String) sortingDaftar.getSelectedItem();
//        String sortOrder = (String) orderByAction.getSelectedItem();
        String orderDirectionAsc = "ASC";
        String orderDirectionDesc = "DESC";

        try {
            StringBuilder sqlBuilder = new StringBuilder("SELECT * FROM kamar");

            // Tambahkan kondisi pencarian berdasarkan kategori
            switch (sortingdaftar) {
                case "Nomor Kamar (Ascending)" ->
                    sqlBuilder.append(" ORDER BY CAST(nomor_kamar AS SIGNED) ASC");
                case "Nomor Kamar (Descending)" ->
                    sqlBuilder.append(" ORDER BY CAST(nomor_kamar AS SIGNED) DESC");
                case "Harga (Ascending)" ->
                    sqlBuilder.append(" ORDER BY harga_bulan ").append(orderDirectionAsc);
                case "Harga (Descending)" ->
                    sqlBuilder.append(" ORDER BY harga_bulan ").append(orderDirectionDesc);
                default ->
                    sqlBuilder.append(" ORDER BY nomor_kamar ").append(orderDirectionAsc); // Default ke nomor_kamar
                case "Status (Tersedia)" ->
                    sqlBuilder.append(" WHERE status = 'Tersedia'");
                case "Status (Tidak Tersedia)" ->
                    sqlBuilder.append(" WHERE status = 'Tidak Tersedia'");
            }

            // Eksekusi query
            PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());
            ResultSet rs = stmt.executeQuery();
            tableModel.setRowCount(0);

            while (rs.next()) {
                java.text.NumberFormat formatter = java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("id", "ID"));
                String hargaFormatted = formatter.format(rs.getDouble("harga_bulan")).replace("Rp", "Rp ");

                Object[] rowData = {
                    rs.getString("nomor_kamar"),
                    hargaFormatted,
                    rs.getString("status"),
                    rs.getString("fasilitas"),
                    rs.getString("ukuran"),
                    rs.getString("daya_listrik"),
                };
                tableModel.addRow(rowData);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error searching: " + e.getMessage());
        }
    }//GEN-LAST:event_sortingDaftarActionPerformed

    private void buttonKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKeluarActionPerformed
        // TODO add your handling code here:    
        int konfirmasi = JOptionPane.showConfirmDialog(
            this, 
            "Apakah Anda yakin ingin keluar dari aplikasi?", 
            "Konfirmasi Keluar", 
            JOptionPane.YES_NO_OPTION
        );
    
        if (konfirmasi == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_buttonKeluarActionPerformed

    private void buttonKembaliKeLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKembaliKeLoginActionPerformed
        try {
            // TODO add your handling code here:
            this.dispose();
            MenuLogin menuLogin = new MenuLogin();
            menuLogin.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(DaftarKamarPelanggan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonKembaliKeLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DaftarKamarPelanggan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DaftarKamarPelanggan().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonKeluar;
    private javax.swing.JButton buttonKembaliKeLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JComboBox<String> sortingDaftar;
    private javax.swing.JTable tabelDaftarKamar;
    // End of variables declaration//GEN-END:variables
}
